/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package key;

import java.awt.Event;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Jossy Xavier
 */
public class menu extends javax.swing.JFrame {

    /**
     * Creates new form menu
     */
    public menu() {
        initComponents();

    }
    
    public static int compararDependencias(ArrayList<dependencia> dep1 , dependencia dep){
        for (int i = 0; i < dep1.size(); i++) {
            int contDet = 0, contDep = 0;
            for (int j = 0; j < dep.getDeterminantes().size(); j++) {
                for (int k = 0; k < dep1.get(i).getDeterminantes().size(); k++) {
                    if(dep1.get(i).getDeterminantes().get(k).contains(dep.getDeterminantes().get(j)))
                        contDet++;
                }          
            }
            
            for (int j = 0; j < dep.getDependientes().size(); j++) {
                for (int k = 0; k < dep1.get(i).getDependientes().size(); k++) {                    
                    if(dep1.get(i).getDependientes().get(k).contains(dep.getDependientes().get(j)))
                        contDep++;
                }   
            }      
            if(contDet == dep1.get(i).getDeterminantes().size() &&contDep == dep1.get(i).getDependientes().size() )
                return i;
                    
        }
        return -1;
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        set = new javax.swing.JTextField();
        izq = new javax.swing.JTextField();
        dere = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dependencias = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        super_Claves = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        candi = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        board = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        cant1 = new javax.swing.JLabel();
        cant2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        jLabel1.setText("Normalizador");

        jLabel2.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        jLabel2.setText("R(");

        jLabel3.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        jLabel3.setText(")");

        set.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        dere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dereActionPerformed(evt);
            }
        });

        jLabel4.setText("-------->");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dependencias.setColumns(20);
        dependencias.setRows(5);
        jScrollPane1.setViewportView(dependencias);

        jLabel5.setFont(new java.awt.Font("Algerian", 0, 18)); // NOI18N
        jLabel5.setText("Dependencias");

        jLabel6.setFont(new java.awt.Font("Algerian", 0, 12)); // NOI18N
        jLabel6.setText("Candidatas");

        jLabel7.setFont(new java.awt.Font("Algerian", 0, 12)); // NOI18N
        jLabel7.setText("Super");

        super_Claves.setColumns(20);
        super_Claves.setRows(5);
        jScrollPane2.setViewportView(super_Claves);

        candi.setColumns(20);
        candi.setRows(5);
        jScrollPane3.setViewportView(candi);

        jLabel8.setFont(new java.awt.Font("Algerian", 0, 12)); // NOI18N
        jLabel8.setText("Normalizacion");

        board.setColumns(20);
        board.setRows(5);
        jScrollPane4.setViewportView(board);

        jButton2.setText("Generar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 51, 51));
        jButton3.setForeground(new java.awt.Color(255, 255, 51));
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 41, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(izq, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dere, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(cant1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cant2)
                                .addGap(102, 102, 102))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(98, 98, 98)
                        .addComponent(jLabel6)
                        .addGap(74, 74, 74))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(127, 127, 127))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jButton2)
                                .addGap(35, 35, 35)
                                .addComponent(jButton3)))
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(set, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addGap(247, 247, 247))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(set, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(izq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(dere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cant1)
                                    .addComponent(cant2))
                                .addGap(13, 13, 13))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static ArrayList<String> segundaFormaNormal(ArrayList<dependencia> deps, String variables, ArrayList<campo> key) {
        String relacionActual = "";
        String keyString = "";
        
        for (int i = 0; i < key.size(); i++) {
            keyString += key.get(i).getNombre();
        }
        String totalTemporal="";
        ArrayList<String> R = new ArrayList();
        for (int i = 0; i < deps.size(); i++) {//saca las dependencias totales
            int contador =0;
            for (int j = 0; j < deps.get(i).getDeterminantes().size(); j++) {
                for (int k = 0; k < keyString.length(); k++) {
                    if((keyString.charAt(k)+"").contains(deps.get(i).getDeterminantes().get(j))){
                        contador++;
                    }
                }
            }
            if(contador ==keyString.length()){
                for (int k = 0; k < deps.get(i).getDeterminantes().size(); k++) { 
                    if(!totalTemporal.contains(deps.get(i).getDeterminantes().get(k)))
                        totalTemporal += deps.get(i).getDeterminantes().get(k);
                }
                for (int k = 0; k < deps.get(i).getDependientes().size(); k++) { 
                    if(!totalTemporal.contains(deps.get(i).getDependientes().get(k)))
                        totalTemporal += deps.get(i).getDependientes().get(k);
                }
                deps.remove(i);
                i--;
            }
        }
        if(totalTemporal.length() == 0){
            totalTemporal = keyString;
        }
               
        ArrayList<dependencia> depTemporal = new ArrayList();
        ArrayList<dependencia> depTemporal3 = new ArrayList();
        for (int i = 0; i < deps.size(); i++) {
            depTemporal.add(new dependencia(deps.get(i).getDeterminantes(),deps.get(i).getDependientes()));
            depTemporal3.add(new dependencia(deps.get(i).getDeterminantes(),deps.get(i).getDependientes()));
        }
        String usedDeps = "";
        for (int i = 0; i < depTemporal.size(); i++) {//saca las dependen  parciales
            
            String parcialTemporal="";
            int contador =0;
            for (int j = 0; j < depTemporal.get(i).getDeterminantes().size(); j++) {
                for (int k = 0; k < keyString.length(); k++) {
                    if((keyString.charAt(k)+"").contains( depTemporal.get(i).getDeterminantes().get(j))){
                        contador++;
                    }
                }
            }
            if(contador==depTemporal.get(i).getDeterminantes().size()){
                for (int j = 0; j < depTemporal.get(i).getDeterminantes().size(); j++) {
                    if(!parcialTemporal.contains(depTemporal.get(i).getDeterminantes().get(j)))
                         parcialTemporal +=  depTemporal.get(i).getDeterminantes().get(j);
                }
                for (int j = 0; j < depTemporal.get(i).getDependientes().size(); j++) {
                    if(!parcialTemporal.contains(depTemporal.get(i).getDependientes().get(j)))
                         parcialTemporal +=  depTemporal.get(i).getDependientes().get(j);
                }
                depTemporal.remove(i);
                 i=-1;
            }
            ArrayList<dependencia> depTemporal2 = new ArrayList();
            for (int j = 0; j < deps.size(); j++) {
                depTemporal2.add(new dependencia(deps.get(j).getDeterminantes(),deps.get(j).getDependientes()));
            }
            for (int j = 0; j < depTemporal2.size(); j++) {                
                int cont =0;
                for (int k = 0; k < parcialTemporal.length(); k++) {
                    for (int l = 0; l < depTemporal2.get(j).getDeterminantes().size(); l++) {
                        if(depTemporal2.get(j).getDeterminantes().get(l).contains(parcialTemporal.charAt(k) +"")){
                            cont++;
                        }
                    }
                }
                if(cont == depTemporal2.get(j).getDeterminantes().size()){
                    int num = compararDependencias(depTemporal3,depTemporal2.get(j));
                        if(num != -1)
                            depTemporal3.remove(num);
                    for (int k = 0; k < depTemporal2.get(j).getDependientes().size(); k++) {
                        if(!parcialTemporal.contains(depTemporal2.get(j).getDependientes().get(k)))
                            parcialTemporal += depTemporal2.get(j).getDependientes().get(k);
                    }
                    depTemporal2.remove(j);
                    j =-1;
                }
            }
            if(parcialTemporal.length()>0){
                boolean repetida = false;
                for (int j = 0; j < R.size(); j++) {
                    int cont = 0;
                    for (int k = 0; k < parcialTemporal.length(); k++) {
                        for (int l = 0; l < R.get(j).length(); l++) {
                            if((""+R.get(j).charAt(l)).contains(parcialTemporal.charAt(k)+"")){
                                cont++;
                            }
                        }
                    }
                    if(cont == parcialTemporal.length())
                        repetida = true;
                }   
                if(!repetida)
                    R.add(parcialTemporal); 
            }
            
        }
        for (int i = 0; i < depTemporal3.size(); i++) {
            for (int j = 0; j < depTemporal3.get(i).getDeterminantes().size(); j++) {
                if(!totalTemporal.contains(depTemporal3.get(i).getDeterminantes().get(j)))
                    totalTemporal +=depTemporal3.get(i).getDeterminantes().get(j);
            }
            for (int j = 0; j < depTemporal3.get(i).getDependientes().size(); j++) {
                if(!totalTemporal.contains(depTemporal3.get(i).getDependientes().get(j)))
                    totalTemporal +=depTemporal3.get(i).getDependientes().get(j);
            }
        }
        

        R.add(0,totalTemporal);
        return R;
    }
    
    
    
    public static ArrayList<String> terceraFormaNormal(ArrayList<String> R, ArrayList<dependencia> deps, ArrayList<campo> key ){
        String keyString = "";       
        ArrayList<String> newR = new ArrayList();
        ArrayList<Integer> forbidden = new ArrayList();
        for (int i = 0; i < R.size(); i++) {
            newR.add(R.get(i));
        }
        for (int i = 0; i < key.size(); i++) {
            keyString += key.get(i).getNombre();
        }
        
        for (int i = 0; i < deps.size(); i++) {
            for (int j = 0; j < deps.get(i).getDeterminantes().size(); j++) {
                if(keyString.contains(deps.get(i).getDeterminantes().get(j))){
                    deps.remove(i);
                    i--;
                    break;
                }                    
            }
        }
        for (int i = 0; i < deps.size(); i++) {            
            for (int j = 0; j < deps.get(i).getDependientes().size(); j++) {
                if(keyString.contains(deps.get(i).getDependientes().get(j))){
                    deps.remove(i);
                    i--;
                    break;
                }                                    
            }       
        }
        
        ArrayList<dependencia> depsTemp = new ArrayList();
        for (int x = 0; x < deps.size(); x++) {
            depsTemp.add(new dependencia(deps.get(x).getDeterminantes(), deps.get(x).getDependientes()));
        }
        for (int i = 0; i < newR.size(); i++) {
            String newRelation = "";
            for (int j = 0; j < depsTemp.size(); j++) {
                int contDet = 0;
                for (int k = 0; k < depsTemp.get(j).getDeterminantes().size(); k++) {
                    if(newR.get(i).contains(depsTemp.get(j).getDeterminantes().get(k)) &&
                            !keyString.contains(depsTemp.get(j).getDeterminantes().get(k))){
                        contDet++;
                    }
                }
                if(contDet == depsTemp.get(j).getDeterminantes().size()){
                    for (int k = 0; k < depsTemp.get(j).getDeterminantes().size(); k++) {
                        newRelation += depsTemp.get(j).getDeterminantes().get(k);
                    }
                    for (int k = 0; k < depsTemp.get(j).getDependientes().size(); k++) {
                        newRelation += depsTemp.get(j).getDependientes().get(k);                       
                    }
                    String oldR = newR.get(i);
                    for (int k = 0; k < depsTemp.get(j).getDependientes().size(); k++) {
                        if(oldR.contains(depsTemp.get(j).getDependientes().get(k))){
                            int temp = oldR.indexOf(depsTemp.get(j).getDependientes().get(k));
                            if (temp + 1 != oldR.length()) {
                                oldR = oldR.substring(0, temp) + oldR.substring(temp + 1);
                            } else {
                                oldR = oldR.substring(0, temp);
                            }
                        }                            
                    }
                    forbidden.add(i);
                    newR.remove(i);
                    newR.add(0,oldR);
                    depsTemp.remove(j);
                    break;
                }  
            }
            if(newRelation.length() > 0) {
                newR.add(newRelation);
                i = -1;
            }
        }
        return newR;
        
        
        
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        /* generar_llaves("H,I,K,L,M,O",deps);*/

        permutaciones(deps, set.getText());
        sortKeyArray();
        generar_candidatas(deps, set.getText());
        for (int i = 0; i < superKeyArray.size(); i++) {
            super_Claves.append(superKeyArray.get(i) + "\n");
        }
        for (int i = 0; i < candidateKeyArray.size(); i++) {
            candi.append(candidateKeyArray.get(i) + "\n");
        }
        cant1.setText(superKeyArray.size() + "");
        cant2.setText(candidateKeyArray.size() + "");
        Random R = new Random();
       // int num = R.nextInt(candidateKeyArray.size());
        ArrayList<campo> primaryKey = new ArrayList();
        for (int i = 0; i < candidateKeyArray.get(0).length(); i++) {
            primaryKey.add(new campo(candidateKeyArray.get(0).charAt(i) + ""));
        }
        String key = "";
        for (int i = 0; i < primaryKey.size(); i++) {
            key += primaryKey.get(i).getNombre();
        }
        board.setText("");
        ArrayList<String> fn2 = segundaFormaNormal(deps, set.getText(), primaryKey);
        ArrayList<String> fn3 = terceraFormaNormal(fn2,deps,primaryKey);
        board.append("Clave Primaria: " + key + "\n\n");
        board.append("Primera Forma Normal:\n     R{" + set.getText() + "}\n");
        board.append("\nSegunda Forma Normal:\n     ");
        for (int i = 0; i < fn2.size(); i++) {
            board.append("R" + (i + 1) + " {" + fn2.get(i) + "}\n     ");
        }
        
        board.append("\nTercera Forma Normal:\n     ");
        for (int i = 0; i < fn3.size(); i++) {
            board.append("R" + (i + 1) + " {" + fn3.get(i) + "}\n     ");
        }

    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 

        add();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        set.setText("");
        board.setText("");
        izq.setText("");
        dere.setText("");
        candi.setText("");
        dependencias.setText("");
        super_Claves.setText("");
        this.deps = new ArrayList();
        superKeyArray = new ArrayList();
        candidateKeyArray = new ArrayList();
        cant1.setText("0");
        cant2.setText("0");
        h.clear();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void dereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dereActionPerformed
        // TODO add your handling code here:
        add();
    }//GEN-LAST:event_dereActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    static public String generar_llaves(String variables, ArrayList<dependencia> dependencias) {
        String[] R = variables.split(",");
        ArrayList<campo> conjunto = new ArrayList();
        for (int i = 0; i < R.length; i++) {
            conjunto.add(new campo(R[i]));
        }
        ArrayList<String> keys = new ArrayList();
        String key = "";
        int cont = 1;
        int max = 0;
        for (int i = 0; i < dependencias.size(); i++) {
            if (dependencias.get(i).getDeterminantes().size() > max) {
                max = dependencias.get(i).getDeterminantes().size();
            }
        }
        for (int i = 0; i < dependencias.size(); i++) {
            for (int k = 0; k < conjunto.size(); k++) {
                if (dependencias.get(i).getDeterminantes().contains(conjunto.get(k).getNombre())
                        && !conjunto.get(k).getRevisado()) {
                    key += conjunto.get(k).getNombre();
                    conjunto.get(k).setRevisado(true);
                }
                if (dependencias.get(i).getDependientes().contains(conjunto.get(k).getNombre())
                        && !conjunto.get(k).getRevisado()) {
                    conjunto.get(k).setRevisado(true);
                }
            }
        }

        for (int i = 0; i < conjunto.size(); i++) {
            if (!conjunto.get(i).getRevisado()) {
                key += conjunto.get(i).getNombre();
                conjunto.get(i).setRevisado(true);
            }
        }
        return key;
    }

    public static void permutaciones(ArrayList<dependencia> a, String variables) {
        ArrayList<dependencia> sub = new ArrayList();
        permutaciones(sub, a, variables);
    }

    public static ArrayList<String> superKeyArray = new ArrayList();

    public static void permutaciones(ArrayList<dependencia> sub, ArrayList<dependencia> a, String variables) {
        int L = a.size();
        if (L == 0) {
            if (!superKeyArray.contains(generar_llaves(variables, sub))) {
                superKeyArray.add(generar_llaves(variables, sub));
            }
        } else {

            for (int i = 0; i < L; i++) {
                ArrayList<dependencia> ab = new ArrayList<dependencia>(sub);
                ab.add(a.get(i));
                ArrayList<dependencia> bc = new ArrayList<dependencia>(a);
                bc.remove(i);
                permutaciones(ab, bc, variables);
            }
        }
    }

    public static void sortKeyArray() {
        for (int i = 0; i < superKeyArray.size(); i++) {
            String key = superKeyArray.get(i);
            String CorrectKey = "";
            char OrderedKey[] = new char[key.length()];
            char temp;
            for (int j = 0; j < key.length(); j++) {
                OrderedKey[j] = key.charAt(j);
            }
            //Bubble sort, ordenar las claves
            for (int j = 0; j < key.length() - 1; j++) {
                for (int k = 0; k < key.length() - 1 - j; k++) {
                    if (OrderedKey[k] > OrderedKey[k + 1]) {
                        temp = OrderedKey[k];
                        OrderedKey[k] = OrderedKey[k + 1];
                        OrderedKey[k + 1] = temp;
                    }
                }
            }
            for (int k = 0; k < OrderedKey.length; k++) {
                CorrectKey += OrderedKey[k];
            }
            superKeyArray.set(i, CorrectKey);
        }
        ArrayList<String> temp = new ArrayList();
        for (int i = 0; i < superKeyArray.size(); i++) {
            if (temp.indexOf(superKeyArray.get(i)) == -1) {
                temp.add(superKeyArray.get(i));
            }
        }
        superKeyArray = temp;
    }

    public static void generar_candidatas(ArrayList<dependencia> dependencias, String variables) {
        String[] R = variables.split(",");
        ArrayList<campo> conjunto = new ArrayList();
        for (int i = 0; i < R.length; i++) {
            conjunto.add(new campo(R[i]));
        }

        for (int i = 0; i < superKeyArray.size(); i++) {//iteras las superkey
            String key = "";
            int contCandidatas = 0;
            ArrayList<dependencia> dependenciasTemp = new ArrayList();
            for (int z = 0; z < superKeyArray.get(i).length(); z++) {//elimina 1 letra
                key = superKeyArray.get(i);
                key = key.replaceAll(superKeyArray.get(i).charAt(z) + "", "");
                String keytemp = key;
                for (int j = 0; j < conjunto.size(); j++) {
                    if(keytemp.contains(conjunto.get(j).getNombre())){
                        conjunto.get(j).setRevisado(true);
                    }
                }
                for (int j = 0; j < dependencias.size(); j++) {
                    dependenciasTemp.add(
                            new dependencia(dependencias.get(j).getDeterminantes(), dependencias.get(j).getDependientes()));
                }
                for (int j = 0; j < dependenciasTemp.size(); j++) {//revisa las dependencias
                    String det = "";
                    String dep = "";
                    for (int k = 0; k < dependenciasTemp.get(j).getDeterminantes().size(); k++) {
                        det += dependenciasTemp.get(j).getDeterminantes().get(k);
                    }
                    for (int k = 0; k < dependenciasTemp.get(j).getDependientes().size(); k++) {
                        dep += dependenciasTemp.get(j).getDependientes().get(k);
                    }
                    boolean entro = false;
                    int contDet = 0;
                    for (int k = 0; k < keytemp.length(); k++) {
                        if (det.contains(keytemp.charAt(k) + "")) {
                            contDet++;
                        }
                    }
                    if (contDet == det.length()) {
                        for (int k = 0; k < conjunto.size(); k++) {
                            if (det.contains(conjunto.get(k).getNombre())) {
                                conjunto.get(k).setRevisado(true);
                                entro = true;
                            }

                            if (dep.contains(conjunto.get(k).getNombre())) {
                                conjunto.get(k).setRevisado(true);
                                if (!keytemp.contains(conjunto.get(k).getNombre())) {
                                    keytemp += conjunto.get(k).getNombre();
                                }
                                entro = true;
                            }
                        }
                        if (entro) {
                            dependenciasTemp.remove(j);
                            j = -1;
                        }
                    }

                }//termina de revisar dependencias
                //revisar si todas las variables fueron revisadas     
                int cont = 0;
                for (int y = 0; y < conjunto.size(); y++) {
                    if (conjunto.get(y).getRevisado()) {
                        cont++;
                    }
                }
                if (cont == conjunto.size()) {
                    contCandidatas++;
                }
                for (int c = 0; c < conjunto.size(); c++) {
                    conjunto.get(c).setRevisado(false);
                }
            }//termina eliminar 1 letra
            if (contCandidatas == 0) {
                candidateKeyArray.add(superKeyArray.get(i));
            }

        }//termina reivsar las superkeys

    }
    ArrayList<String> h = new ArrayList();
    public void add() {
        boolean esta = true;
        String[] izquierda = izq.getText().split(",");
        String[] derecha = dere.getText().split(",");
        ArrayList<String> det1 = new ArrayList();
        for (int i = 0; i < izquierda.length; i++) {
            det1.add(izquierda[i]);
            if(!h.contains(izquierda[i])){
                h.add(izquierda[i]);
            }        
            
        }
        ArrayList<String> dep1 = new ArrayList();
        for (int i = 0; i < derecha.length; i++) {
            dep1.add(derecha[i]);
             if(!h.contains(derecha[i])){
                h.add(derecha[i]);
            } 
           
        }
        set.setText("");
        for (int i = 0; i < h.size(); i++) {
           if(i==0){
               set.setText(set.getText()+h.get(i)+",");
           }else{
              if((i+1)==h.size()){
                set.setText(set.getText()+h.get(i));
              }else{
                set.setText(set.getText()+h.get(i)+",");
               }
               
           }
           
        }
        
        
      
                dependencia dependencia1 = new dependencia(det1, dep1);
                deps.add(dependencia1);
                dependencias.append(izq.getText() + "---->" + dere.getText() + "\n");
     
        izq.setText("");
        dere.setText("");
        izq.requestFocus(true);
        //izq.requestFocus();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea board;
    private javax.swing.JTextArea candi;
    private javax.swing.JLabel cant1;
    private javax.swing.JLabel cant2;
    private javax.swing.JTextArea dependencias;
    private javax.swing.JTextField dere;
    private javax.swing.JTextField izq;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField set;
    private javax.swing.JTextArea super_Claves;
    // End of variables declaration//GEN-END:variables
    ArrayList<dependencia> deps = new ArrayList();
    public static ArrayList<String> candidateKeyArray = new ArrayList();
}
